wolfarame alpha query...

- http://api.wolframalpha.com/v2/query?appid=RQ4QVQ-U3LPL2YGPR&input=population%20of%20india

- http://api.wolframalpha.com/v2/query?appid=RQ4QVQ-U3LPL2YGPR&input=population%20india&includepodid=Result

pragma solidity ^0.4.25;
import "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.25.sol";
 
contract USDPrice is usingOraclize {
    
    uint public price;
 
    event Log(string text);
 
    function USDPrice() {
        Log("Contract created.");
        update();
    }
    
    function getPrice() constant returns (uint) {
       return price;
    }
    
    function __callback(bytes32 _myid, string _result) {
        require (msg.sender == oraclize_cbAddress());
        Log(_result);
        price = parseInt(_result, 2); // let's save it as $ cents
    }
    
    function update() payable {
        Log("Oraclize query was sent, waiting for the answer..");
        oraclize_query("URL","json(https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).USD");
    }
    
}



pragma solidity ^0.4.25;

import "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.25.sol";

contract UrlRequests is usingOraclize {

    event LogNewOraclizeQuery(string description);
    event LogResult(string result);
    
    constructor() public {
        oraclize_setProof(proofType_Android | proofStorage_IPFS);
    }


    function __callback(bytes32 myid, string memory result, bytes memory proof) public {
        require(msg.sender == oraclize_cbAddress());
        emit LogResult(result);
    }

    function request(string memory _query, string memory _method, string memory _url, string memory _kwargs) public payable {
        if (oraclize_getPrice("computation") > address(this).balance) {
            emit LogNewOraclizeQuery("Oraclize query was NOT sent, please add some ETH to cover for the query fee");
        } else {
            emit LogNewOraclizeQuery("Oraclize query was sent, standing by for the answer...");
            oraclize_query("computation",
                [_query,
                _method,
                _url,
                _kwargs]
            );
        }
    }
    // sends a custom content-type in header and returns the header used as result
    // wrap first argument of computation ds with helper needed, such as json in this case
    function requestCustomHeaders() public payable {
        request("json(QmdKK319Veha83h6AYgQqhx9YRsJ9MJE7y33oCXyZ4MqHE).headers",
                "GET",
                "http://httpbin.org/headers",
                "{'headers': {'content-type': 'json'}}"
                );
    }

    function requestBasicAuth() public payable {
        request("QmdKK319Veha83h6AYgQqhx9YRsJ9MJE7y33oCXyZ4MqHE",
                "GET",
                "http://httpbin.org/basic-auth/myuser/secretpass",
                "{'auth': ('myuser','secretpass'), 'headers': {'content-type': 'json'}}"
                );
    }

    function requestPost() public payable {
        request("QmdKK319Veha83h6AYgQqhx9YRsJ9MJE7y33oCXyZ4MqHE",
                "POST",
                "https://api.postcodes.io/postcodes",
                '{"json": {"postcodes" : ["OX49 5NU"]}}'
                );
    }

    function requestPut() public payable {
        request("QmdKK319Veha83h6AYgQqhx9YRsJ9MJE7y33oCXyZ4MqHE",
                "PUT",
                "http://httpbin.org/anything",
                "{'json' : {'testing':'it works'}}"
                );
    }

    function requestCookies() public payable {
        request("QmdKK319Veha83h6AYgQqhx9YRsJ9MJE7y33oCXyZ4MqHE",
                "GET",
                "http://httpbin.org/cookies",
                "{'cookies' : {'thiscookie':'should be saved and visible :)'}}"
                );
    }
}

python main.py -e -p 044992e9473b7d90ca54d2886c7addd14a61109af202f1c95e218b0c99eb060c7134c4ae46345d0383ac996185762f04997d6fd6c393c86e4325c469741e64eca9 "URL"
